#!/bin/env python
# File: tinydns.py
# Author: Mike Roest <msroest@users.sourceforge.net>
# Purpose: 
#	This file will connect to the BlahzDNS DataBase and output 
#	A properly formed tinydns-data file.
#
#
#Import required modules.
import MySQLdb
import string
import getopt
import sys
import time

#Config Values
username = ''
password = ''
dbHost = 'localhost'
dbName = 'blahzdns'

#Main Program
def main():
	global dbHost
	global dbName
	global username
	global password
	#First get comand line arguments
	try:
	  opts, args = getopt.getopt(sys.argv[1:],"u:p:H:D:dho:ra",["username=","password=","dbhost=","dbname=","debug","help","output-file=","override","read-only","about"])
	except getopt.GetoptError:
	  print "Illegal Option"
	  usage()
	  sys.exit()
	#set defaults
	outputFile = "data"
	debug=0
	override=0
	readOnly=0
	for o,a in opts:
	  if o in ("-h","--help"):
	    usage()
	    sys.exit()
	  if o in ("-a","--about"):
	    about()
	    sys.exit()
	  if o in ("-o","--output-file"):
	    outputFile=a
	  if o in ("-d","--debug"):
	    debug=1
	  if o in ("-u","--username"):
	    username = a
	  if o in ("-p","--password"):
	    password = a
	  if o in ("-H","--dbhost"):
	    dbHost = a
	  if o in ("-D","--dbname"):
	    dbName = a
	  if o =="--override":
	    override = 1
	  if o in ("-r","--read-only"):
	    readOnly=1
	    
	if debug:
	  print "Finished Parsing Command Line Parameters -- Results:"
	  print "Debug: "+debug.__str__()
	  print "Output File: "+outputFile
	  print "Username: "+username
	  print "Password: "+password
	  print "dbHost: "+dbHost
	  print "dbName: "+dbName
	
	if (username=="" or password =="") and override==0:
	  print "Must specify a username & password (or --override commandline option)\n";
	  sys.exit(1)
	try:
          db = MySQLdb.connect(host=dbHost,db=dbName,user=username,passwd=password)
	except :
	  print "Unable to Connect to DataBase\nPlease check username,password,DB name and DB host\n"
	  sys.exit(1)
	config = getConfig(username,password,dbName,dbHost)
	output = open(outputFile,"w")
	mname = config.get("ORIGINSERVER")
	if (mname[len(mname)-1] != '.'):
	  mname = mname+"."
	admin = config.get("DNSADMIN")
	if(admin[len(admin)-1] != '.'):
	  admin = admin+"."
	header = config.get("CONFIGHEADER")
	ttl = config.get("REFRESH")
	output.write("#Data File Generated By tinydns.py of BlahzDNS\n");
	output.write("#On : "+time.asctime()+"\n\n")
	#output.write(header+"\n\n")
	c=db.cursor()
	c.execute("SELECT ZONEID,NAME,UPDATED FROM ZONES WHERE ZONETYPEID=1 AND ZONESTATUSID=1")
	result = c.fetchall()
	c.close()
	for zoneId,zoneName,updated in result:
	  if debug:
	    print "Beginning Work for "+zoneName
	  output.write("#Domain: "+zoneName+"\n")

  	  c=db.cursor()
	  c.execute("""SELECT RT.NAME,R.RECORD,R.TTL,
	  		R.MXPRIORITY,R.VALUE,R.RECORDID FROM
			RECORDTYPE RT, RECORDS R WHERE R.ZONEID="""+zoneId.__str__()+
				    """ AND R.RECORDTYPEID=RT.RECORDTYPEID
				    	ORDER BY RT.SORTORDER,R.RECORD,R.MXPRIORITY""")
	  result = c.fetchall()
 	  c.close
	  if debug:
	    print "Records for "+zoneName+result.__str__()
	  for type,record,ttl,mxpriority,value,recordid in result:
	    
	    #Handle SOA Records
	    if type == 'SOA':
	      soaParts = string.split(value,",")
	      if(record != "@"):
	        fqdn = record+zoneName
	      else:
	        fqdn = zoneName
	      newSOA=soaParts[0]
	      if updated == 1 and readOnly == 0:
	        revision = soaParts[0][-2:]
		datePart = soaParts[0][:-2]
		newdatePart = time.strftime("%Y%m%d")
		if newdatePart==datePart:
		  revision=int(revision)+1
		  if revision < 10:
		    newSOA=datePart+"0"+revision.__str__()
		  else:
		    newSOA=datePart+revision.__str__()
		else:
		  newSOA=newdatePart+"01"
   	      output.write("Z"+fqdn+":"+mname+":"+admin+":"+newSOA+":"+soaParts[1]+":"+soaParts[2]+":"+soaParts[3]+":"+soaParts[4]+":"+ttl.__str__()+"\n")

	      if readOnly == 0:
	        query = "UPDATE RECORDS SET VALUE='"+newSOA+","+soaParts[1]+","+soaParts[2]+","+soaParts[3]+","+soaParts[4]+"' WHERE RECORDID="+recordid.__str__()
	        c=db.cursor()
	        c.execute(query)
	        c.close()

	    #Handle PTR Records
	    if type == 'PTR':
	      if(record == "@"):
	        record=zoneName
	      else:
	        if(record[len(record)-1] != '.'):
                  record = record+"."+zoneName
                else:
		  record = record[0:(len(record)-2)]
		if(ttl == None):
		  ttl=""
		else:
		  ttl = ":"+ttl.__str__()
		if(value[len(value)-1] != "."):
		  value = value+"."+zoneName+"."
		output.write("^"+record+":"+value+ttl+"\n")
						  

	    #Handle A Records
	    if type == 'A':
	      if(record == "@"):
	        record = zoneName
	      else:
	        if(record[len(record)-1] != '.'):
	          record = record+"."+zoneName
	        else:
		  record = record[0:(len(record)-2)]
	      if(ttl == None):
	        ttl = ""
	      output.write("+"+record+":"+value+":"+ttl.__str__()+"\n")
	    
	    #Handle MX Records
	    if type == 'MX':
	      if(record == "@"):
	        record = zoneName
	      else:
	        if(record[len(record)-1] != '.'):
                  record = record+"."+zoneName
                else:
                  record = record[0:(len(record)-2)]
	      if(value[len(value)-1] != "."):
	        value = value+"."+zoneName+"."
	      if(ttl == None):
	        ttl=""
	      else:
	        ttl = ":"+ttl.__str__()
	      output.write("@"+record+"::"+value+":"+mxpriority.__str__()+ttl+"\n")

	    #Handle NS Records
	    if type == 'NS':
	      if(record == "@"):
	        record=zoneName
	      else:
	        if(record[len(record)-1] != '.'):
		  record = record+"."+zoneName
		else:
		  record = record[0:(len(record)-2)]
	      if(value[len(value)-1] != "."):
		value = value+"."+zoneName+"."
	      if(ttl == None):
	        ttl=""
	      else:
	        ttl=":"+ttl.__str__()
	      output.write("&"+record+"::"+value+ttl+"\n")
	    
	    #Handle TXT Records
	    if type == 'TXT':
	      if(record == "@"):
	        record=zoneName
	      else:
	        if(record[len(record)-1] != '.'):
                  record = record+"."+zoneName
                else:
                  record = record[0:(len(record)-2)]
	      output.write("'"+record+":"+string.replace(value,":","\\072")+"\n")

	    #Hande HINFO Records
	    if type == 'HINFO':
	      pass

	    #Handle CNAME Records
	    if type == 'CNAME':
	      if(record == "@"):
	        record = zoneName
	      else:
	        if(record[len(record)-1] != '.'):
		  record = record+"."+zoneName
		else:
		  record = record[0:(len(record)-2)]
	      if(value[len(value)-1] != "."):
	        value = value+"."+zoneName+"."
	      if(ttl == None):
	        ttl=""
	      else:
	        ttl = ":"+ttl.__str__()
	      output.write("C"+record+":"+value+ttl+"\n")
	if readOnly == 0:
  	  query = "UPDATE ZONES SET UPDATED=0 WHERE ZONETYPEID=1 AND ZONESTATUSID=1"
	  c=db.cursor()
	  c.execute(query)
	  c.close()
	
	return



def usage():
	print "Usage: tinydns.py [OPTIONS]"
	print "-oFILE,--output-file=FILE: \tWhere FILE is the desired tinydns-datafile"
	print "-uUSER,--username=USER: \tSet mySQL username"
	print "-pPASS,--password=PASS: \tSet mySQL password"
	print "-HHOST,--dbhost=HOST: \t\tSet mySQL Server hostname (defaults to localhost)"
	print "-DDB,--dbname=DB: \t\tSet Blahz DNS DB name (defaults to blahzdns)"
	print "--override: \t\t\tAllows blank username/password"
	print "--read-only: \t\t\tAllows a readonly client. To not update the Host"
	print "-d,--debug : \t\t\tPrint Increased Debugging to STDOUT"
	print "-h,--help : \t\t\tThis Screen"
	print "-a,--about : \t\t\tAbout tinydns.py"
	return

def about():
	print "This python script will output a tinydns data format file"
	print "http://cr.yp.to/djbdns/tinydns-data.html. This can either"
	print "be added to your Makefile for tinydns for manual updates,"
	print "or to cron to auto-update changes made to the DB"
	return
	
def getConfig(username,password,dbName,dbHost):
	configHash= {}
	db = MySQLdb.connect(host=dbHost,db=dbName,user=username,passwd=password)
        c=db.cursor()
	c.execute("SELECT POT.NAME,PO.VALUE FROM PROGRAMOPTIONTYPE POT,PROGRAMOPTIONS PO WHERE POT.PROGRAMOPTIONTYPEID=PO.PROGRAMOPTIONTYPEID")
	result = c.fetchall()
	for name,value in result:
	  configHash[name] = value
	  configHash[name] = string.replace(configHash[name],"\\\"","\"")
	return configHash
	  
if __name__ == "__main__":
    main()
